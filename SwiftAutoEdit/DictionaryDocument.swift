//
//  DictionaryDocument.swift
//  SwiftAutoEdit
//
//

// TO DO: tab view should switch between Suites and Search automatically

// TO DO: an improved dictionary viewer should list commands in Swift-style syntax, e.g. `duplicate(_:to:replacing:)`

import Cocoa
import OSAKit


class DictionaryDocument: NSDocument {
    
    @IBOutlet var dictionaryController: OSADictionaryController!
    
    var sdef: Data?
    
    dynamic var applicationClassName: String = "Dictionary" // used as window title

    override var windowNibName: String? { return "DictionaryDocument" }
    
    override func windowControllerDidLoadNib(_ windowController: NSWindowController) {
        // TO DO: would help to have SA's SDEF generator insert a [non-standard] `format="SwiftAutomation"` in top-level element; if not found, assume the SDEF is in original AS format and call installed/embedded aeglue to translate the SDEF to SA format using default autogenerated prefix; also, would help to have Application class name so that can appear in window's title bar
        if let sdef = self.sdef, let dict = OSADictionary(data: sdef, error: nil) {
            self.dictionaryController.setDictionary(dict)
            if let doc = (try? XMLDocument(data: sdef, options: 0)),
                    let name = doc.rootElement()?.attribute(forName: "applicationClassName")?.stringValue,
                    let prefix = doc.rootElement()?.attribute(forName: "classNamePrefix")?.stringValue {
                self.applicationClassName = "\(name) (\(prefix))"
            }
            //windowController.window!.makeKeyAndOrderFront(self) // TO DO: this doesn't work here as window isn't yet initialized
        } else {
            NSLog("Can't display SDEF.")
        }
    }
    
    @objc func windowWillClose(_ notification: NSNotification) {
        NSDocumentController.shared().removeDocument(self)
    }
    
    override func read(from data: Data, ofType typeName: String) throws {
        self.sdef = data
    }
}

