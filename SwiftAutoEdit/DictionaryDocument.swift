//
//  DictionaryDocument.swift
//  SwiftAutoEdit
//
//

// TO DO: tab view should switch between Suites and Search automatically

// TO DO: an improved dictionary viewer should list commands in Swift-style syntax, e.g. `duplicate(_:to:replacing:)`

import Cocoa
import OSAKit


class DictionaryDocument: NSDocument {
    
    @IBOutlet var dictionaryController: OSADictionaryController!
    
    var sdef: Data?
    
    dynamic var applicationClassName: String = "APPLICATION" // used as window title; TO DO: this should be set from SDEF <dictionary SwiftAutomation:ApplicationClass="NAME"> attribute inserted by aeglue (TBH, a simpler solution might be to put the class and prefix names in glue consts/xml attributes and leave keyword translation till display time, c.f. SE's dictionary viewer; but then the whole SDEF rewriting thing is just a cheap hack to provide working documentation thru existing SDEF viewers)

    override var windowNibName: String? {
        return "DictionaryDocument"
    }
    
    override func windowControllerDidLoadNib(_ windowController: NSWindowController) {
        // TO DO: would help to have SA's SDEF generator insert a [non-standard] `format="SwiftAutomation"` in top-level element; if not found, assume the SDEF is in original AS format and call installed/embedded aeglue to translate the SDEF to SA format using default autogenerated prefix; also, would help to have Application class name so that can appear in window's title bar
        if let sdef = self.sdef, let dict = OSADictionary(data: sdef, error: nil) {
            self.dictionaryController.setDictionary(dict)
            //windowController.window!.makeKeyAndOrderFront(self) // TO DO: this doesn't work here as window isn't yet initialized
        } else {
            NSLog("Can't display SDEF.")
        }
    }
    
    @objc func windowWillClose(_ notification: NSNotification) {
        NSDocumentController.shared().removeDocument(self)
    }
    
    override func read(from data: Data, ofType typeName: String) throws {
        self.sdef = data
    }
}

